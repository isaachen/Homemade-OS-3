# required
NDEBUG=-DNDEBUG
NASM=./tool/nasm-2.11.06/nasm.exe
ASMFLAGS=-f elf32
CC=./tool/toolchain32/bin/i686-linux-gnu-gcc.exe
CFLAGS=-freg-struct-return -march=i586 -Wall -Wextra -Werror -Wshadow -Wstrict-prototypes -Wmissing-prototypes -fno-builtin -O0 -Isrc\kernel -Isrc\lib
USER_CFLAGS=-m32 -freg-struct-return -march=i586 -Wall -Wextra -Wshadow -Wstrict-prototypes -Wmissing-prototypes -fno-builtin
CINC=-Isrc -Isrc\kernel -Isrc\lib
USER_CINC=-Isrc\lib
LD=./tool/toolchain32/bin/i686-linux-gnu-ld.exe
AR=./tool/toolchain32/bin/i686-linux-gnu-ar.exe
LDFLAGS=--strip-debug
LIBGCC=$(shell $(CC) $(CFLAGS) -print-libgcc-file-name)
BFI=./tool/bfi10/bfi.exe
LS=dir /A-D /B /S

# optional
# virtual machine
QEMU=./tool/qemu/
QEMU_IMG=$(QEMU)/qemu-img.exe
QEMU_I386=$(QEMU)/qemu-system-i386w.exe -L $(QEMU)/Bios -cpu pentium
BOCHS=./tool/bochs-p4-smp-2.6.7-win32
BOCHS_SMP=$(BOCHS)/bochsdbg-p4-smp.exe
VIRTUALBOX=C:\Program Files\Oracle\VirtualBox\VBoxManage.exe

# disk image
MKDOSFS=./tool/mkdosfs/mkdosfs.exe

# archive
7ZA=./tool/7z1514-extra/x64/7za.exe

#directory
BUILD_DIR=build
SRC_DIR=src
BLOB_DIR=src\blob
BLOB_BUILD_DIR=src\blob_build

CURRENT_DIR=$(shell echo %cd%)

# source
ASM_SRC=$(shell $(LS) $(SRC_DIR)\kernel\*.asm)
C_SRC=$(shell $(LS) $(SRC_DIR)\kernel\*.c)
C_LIB_SRC=$(shell $(LS) $(SRC_DIR)\lib\*.c)
BLOB_SRC=$(shell $(LS) $(BLOB_DIR)\*)
BLOB_LIST_SRC=$(BLOB_BUILD_DIR)\bloblist.c
USER_C_SRC=$(shell $(LS) $(SRC_DIR)\user\*.c)

ASM_OBJ=$(patsubst $(CURRENT_DIR)\\%.asm,%.o,$(ASM_SRC))
C_OBJ=$(patsubst $(CURRENT_DIR)\\%.c,%.o,$(C_SRC))
LIB_OBJ=$(patsubst $(CURRENT_DIR)\\%.c,%.o,$(C_LIB_SRC))
BLOB_OBJ=$(patsubst $(CURRENT_DIR)\$(BLOB_DIR)\\%,$(BLOB_BUILD_DIR)\\%.o,$(BLOB_SRC))
BLOB_LIST_OBJ=$(BLOB_BUILD_DIR)\bloblist.o
USER_ELF=$(patsubst $(CURRENT_DIR)\\%.c,%.elf,$(USER_C_SRC))

OBJ=$(C_OBJ) $(LIB_OBJ) $(ASM_OBJ) $(BLOB_OBJ) $(BLOB_LIST_OBJ)

BOOTLOADER_ASM=$(SRC_DIR)\other\floppyloader.asm
USER_ENTRY_ASM=$(SRC_DIR)\other\userentry.asm
USER_ENTRY_OBJ=$(SRC_DIR)\other\userentry.o

all: os3.img os3.a $(USER_ELF)

os3.img: floppyloader.bin $(BUILD_DIR)/kernel.bin
	$(BFI) -t=6 -b=$< -f=$@ $(BUILD_DIR)

floppyloader.bin: $(BOOTLOADER_ASM)
	$(NASM) $< -o $@

$(BUILD_DIR)/kernel.bin: $(OBJ)
	$(LD) $(LDFLAGS) -T kernel.ld -o kernel.o $(OBJ) $(LIBGCC)
	objcopy -O binary kernel.o $(BUILD_DIR)/kernel.bin
	
os3.a: $(LIB_OBJ)
	del os3.a
	$(AR) -qv os3.a $(LIB_OBJ)

%.elf: %.c os3.a $(USER_ENTRY_OBJ)
	$(CC) $(USER_CFLAGS) $(USER_CINC) -c $< -o $*.o
	$(LD) $(LDFLAGS) os3.a $(USER_ENTRY_OBJ) $*.o --entry=main -o $@

.SUFFIXES: .o .asm .c	
.asm.o:
	$(NASM) $(ASMFLAGS) $< -o $@

.c.o:
	$(CC) $(CFLAGS) $(CINC) -c $< -o $@

$(BLOB_OBJ): $(BLOB_BUILD_DIR)\\%.o: $(BLOB_DIR)\\%
	cd $(BLOB_DIR) & objcopy --binary-architecture=i386 -I binary -O elf32-i386 $* $(CURRENT_DIR)\$@

$(BLOB_LIST_SRC): $(BLOB_OBJ)
	$(MAKE) -f Makefile-windows -C $(BLOB_BUILD_DIR) "OBJ=$(notdir $(BLOB_SRC))"

clean:
	del floppyloader.bin os3.img os3.lib $(BUILD_DIR)\kernel.bin kernel.o kernel.elf $(OBJ) $(USER_ELF) $(BLOB_LIST_SRC)

run: runqemu

runbochs: os3.img
	$(BOCHS_SMP) -q -f $(BOCHS)/bochsrc.bxrc

QEMU_TEST_SATA=-drive file=freedos.qcow,if=none,id=testdisk -device ich9-ahci,id=ahci -device ide-drive,drive=testdisk,bus=ahci.0
QEMU_TEST_SATA2=-drive file=empty.raw,if=none,id=testdisk2 -device ide-drive,drive=testdisk2,bus=ahci.1
QEMU_TEST_NETWORK=-net nic,vlan=1,model=e1000 -net nic,vlan=1,model=e1000

runqemu: os3.img
	$(QEMU_I386) -smp cpus=3,cores=1,threads=1 -m 128 $(QEMU_TEST_NETWORK) $(QEMU_TEST_SATA) $(QEMU_TEST_SATA2) -fda os3.img -boot order=a

runvbox: os3.img
	$(VIRTUALBOX) startvm HomemadeOS3 --type gui

disk:
	$(QEMU_IMG) create -f raw empty.raw 40M
	$(MKDOSFS) -v -F 32 empty.raw

archive:
	$(7ZA) a -tzip src.zip src -xr!*.o -xr!*.elf
